name: End to End Tests with Operator #non-appsignals testing
on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      image_name:
        required: true
        type: string

env:
  AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
  TESTING_FRAMEWORK_REPO: aws-observability/aws-otel-test-framework
  NUM_BATCHES: 2
  DDB_TABLE_NAME: BatchTestCache

permissions:
  id-token: write
  contents: read

jobs:
  create-test-ref:
    runs-on: ubuntu-latest
    outputs:
      testRef: ${{ steps.setRef.outputs.ref }}
    steps:
      - name: Set testRef output
        id: setRef
        run: echo "ref=terraform" >> $GITHUB_OUTPUT

  # job to build testbatches for e2e integration test
  get-testing-suites:
    runs-on: ubuntu-latest
    needs: [ create-test-ref ]
    outputs:
      test-case-batch-key: ${{ steps.set-batches.outputs.batch-keys }}
      test-case-batch-value: ${{ steps.set-batches.outputs.batch-values }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: aws-otel-java-instrumentation

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: '~1.18.9'

      - name: Create test batch key values
        id: set-batches
        run: |
          cd testing-framework/tools/batchTestGenerator
          go build
          ./batchTestGenerator github --testCaseFilePath=$GITHUB_WORKSPACE/aws-otel-java-instrumentation/.github/workflows/testcases.json --maxBatch=${{ env.NUM_BATCHES }} \
            --include=EKS_ADOT_OPERATOR,EKS_ADOT_OPERATOR_ARM64

      - name: List testing suites
        run: |
          echo ${{ steps.set-batches.outputs.batch-keys }}
          echo ${{ steps.set-batches.outputs.batch-values }}


  # job to run the e2e integration tests
  run-batch-job:
    runs-on: ubuntu-latest
    needs: [ create-test-ref, get-testing-suites ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-testing-suites.outputs.test-case-batch-key) }}

    steps:
      # required for versioning
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: aws-otel-java-instrumentation

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.5"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.JAVA_INSTRUMENTATION_INTEG_TEST_ARN}}
          aws-region: us-west-2
          # 4 hours
          role-duration-seconds: 14400

      - name: Checkout testing framework
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TESTING_FRAMEWORK_REPO }}
          path: testing-framework
          ref: ${{ needs.create-test-ref.outputs.testRef }}

      - name: create test-case-batch file
        run: |
          jsonStr='${{ needs.get-testing-suites.outputs.test-case-batch-value }}'
          jsonStr="$(jq -r '.${{ matrix.BatchKey }} | join("\n")' <<< "${jsonStr}")"
          echo "$jsonStr" >> testing-framework/terraform/test-case-batch
          cat testing-framework/terraform/test-case-batch

      - name: Get TTL_DATE for cache
        id: date
        run: echo "ttldate=$(date -u -d "+7 days" +%s)" >> $GITHUB_OUTPUT

      - name: run tests
        run: |
          export TTL_DATE=${{ steps.date.outputs.ttldate }} 
          export TF_VAR_java_auto_instrumentation_tag=${{ inputs.image_tag }}
          export TF_VAR_java_auto_instrumentation_repository="${{ inputs.image_name }}"
          export DDB_BATCH_CACHE_SK=${{ inputs.image_tag }}
          cd testing-framework/terraform
          make execute-batch-test

      - name: output cache misses
        if: ${{ failure() }}
        run: |
          export DDB_BATCH_CACHE_SK=${{ inputs.image_tag }}
          cd testing-framework/terraform
          make checkCacheHits

      # This is here just in case workflow cancel
      # We first kill terraform processes to ensure that no state
      # file locks are being held from SIGTERMS dispatched in previous
      # steps.
      - name: Destroy resources
        if: ${{ cancelled() }}
        shell: bash {0}
        run: |
          ps -ef | grep terraform | grep -v grep | awk '{print $2}' | xargs -n 1 kill
          cd testing-framework/terraform
          make terraformCleanup

  # publish status
  publish-build-status:
    needs: [ run-batch-job ]
    if: ${{ always() }}
    uses: ./.github/workflows/publish-status.yml
    with:
      namespace: 'ADOT/GitHubActions'
      repository: ${{ github.repository }}
      branch: ${{ github.ref_name }}
      workflow: main-build
      success: ${{  needs.run-batch-job.result == 'success' }}
      region: us-west-2
    secrets:
      roleArn: ${{ secrets.METRICS_ROLE_ARN }}