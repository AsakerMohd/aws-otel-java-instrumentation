name: Java Agent Main Build
on:
  push:
    branches:
      - main
      - "release/v*"
env:
  AWS_DEFAULT_REGION: us-east-1
  TEST_TAG: public.ecr.aws/aws-observability/adot-autoinstrumentation-java:test
  STAGING_ECR_REGISTRY: 611364707713.dkr.ecr.us-west-2.amazonaws.com
  STAGING_ECR_REPOSITORY: adot-autoinstrumentation-java-operator-staging

concurrency:
  group: java-agent-main-build
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

jobs:
  testpatch:
    name: Test patches applied to dependencies
    runs-on: aws-otel-java-instrumentation_ubuntu-latest_32-core
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
      # vaadin 14 tests fail with node 18
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # vaadin tests use pnpm
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-test-cache-pnpm-modules
      - uses: gradle/wrapper-validation-action@v1
      - uses: ./.github/actions/patch-dependencies
        with:
          run_tests: "true"
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

  build:
    runs-on: ubuntu-latest
    outputs:
      java_agent_tag: ${{ steps.java_agent_versioning.outputs.STAGING_TAG}}
      staging-image-name: ${{ steps.imageNameOutput.outputs.imageName }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

        # cache local patch outputs
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/io/opentelemetry/
          key: ${{ runner.os }}-maven-local-${{ hashFiles('.github/patches/opentelemetry-java*.patch') }}

      - name: Publish patched dependencies to maven local
        uses: ./.github/actions/patch-dependencies
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_password: ${{ secrets.GPG_PASSPHRASE }}

      - uses: gradle/wrapper-validation-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Log in to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Build snapshot with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build integrationTests snapshot --stacktrace -PenableCoverage=true -PlocalDocker=true
        env:
          PUBLISH_USERNAME: ${{ secrets.PUBLISH_USERNAME }}
          PUBLISH_PASSWORD: ${{ secrets.PUBLISH_PASSWORD }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Pull base image of Contract Tests Sample Apps
        run: docker pull public.ecr.aws/docker/library/amazoncorretto:17-alpine

      - name: Run contract tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: contractTests -PlocalDocker=true

      - name: Get current version
        shell: bash
        run: |
          echo "ADOT_JAVA_VERSION=$(./gradlew printVersion -q )" >> $GITHUB_ENV

      - name: Build and push Sample-Apps without Auto-Instrumentation Agent
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jibBuildWithoutAgent
        env:
          COMMIT_HASH: ${{ github.sha }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v5
        with:
          push: false
          build-args: "ADOT_JAVA_VERSION=${{ env.ADOT_JAVA_VERSION }}"
          context: .
          platforms: linux/amd64
          tags: ${{ env.TEST_TAG }}
          load: true

      - name: Test docker image
        shell: bash
        run: .github/scripts/test-adot-javaagent-image.sh "${{ env.TEST_TAG }}" "${{ env.ADOT_JAVA_VERSION }}"

      - name: Upload to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: aws-opentelemetry-agent.jar
          path: otelagent/build/libs/aws-opentelemetry-agent-*.jar

      - name: Get ADOT_JAVA_AGENT Image Tag
        id: java_agent_versioning
        run: |
          shortsha="$(git rev-parse --short HEAD)"
          java_agent_tag=${{ env.ADOT_JAVA_VERSION }}-$shortsha
          echo "STAGING_TAG=$java_agent_tag" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.JAVA_INSTRUMENTATION_SNAPSHOT_ECR }}
          aws-region: us-west-2

      - name: Login to private staging ecr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.STAGING_ECR_REGISTRY }}
        env:
          AWS_REGION: us-west-2

      - name: Build and push staging image for e2e integration test
        uses: docker/build-push-action@v5
        with:
          push: true
          build-args: "ADOT_JAVA_VERSION=${{ env.ADOT_JAVA_VERSION }}"
          context: .
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.STAGING_ECR_REGISTRY }}/${{ env.STAGING_ECR_REPOSITORY }}:${{ steps.java_agent_versioning.outputs.STAGING_TAG }}

      - name: Set image name to output
        id: imageNameOutput
        run: echo "imageName=${{ env.STAGING_ECR_REGISTRY }}/${{ env.STAGING_ECR_REPOSITORY }}:${{ steps.java_agent_versioning.outputs.STAGING_TAG }}" >> $GITHUB_OUTPUT

  create-test-ref:
    runs-on: ubuntu-latest
    outputs:
      testRef: ${{ steps.setRef.outputs.ref }}
    steps:
      - name: Set testRef output
        id: setRef
        run: |
          if [[ ${{ github.ref_name }} == release/v* ]]; then
            echo "ref=java-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "ref=terraform" >> $GITHUB_OUTPUT
          fi

  # Non-AppSignals e2e tests with Operator
  e2e-operator-test:
    needs: [ build, create-test-ref ]
    uses: ./.github/workflows/e2e-tests-with-operator.yml
    secrets: inherit
    with:
      aws-region: us-east-1
      image_tag: ${{ needs.build.outputs.java_agent_tag }}
      image_name: ${{ env.STAGING_ECR_REGISTRY }}/${{ env.STAGING_ECR_REPOSITORY }}
      test_ref: ${{ needs.create-test-ref.outputs.testRef }}
      caller-workflow-name: 'main-build'

  # Non-AppSignals e2e tests where SampleApp has Java Agent
  e2e-test:
    needs: build
    uses: ./.github/workflows/e2e-tests-app-with-java-agent.yml
    secrets: inherit
    with:
      aws-region: {{ env.AWS_DEFAULT_REGION }}
      image_tag: ${{ github.sha }}
      caller-workflow-name: 'main-build'

  # AppSignals Contract Tests
  contract-tests:
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

        # cache local patch outputs
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/io/opentelemetry/
          key: ${{ runner.os }}-maven-local-${{ hashFiles('.github/patches/**/opentelemetry-java-*.patch') }}

      - uses: gradle/wrapper-validation-action@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Log in to AWS ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Build and push agent and testing docker images with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jib
        env:
          COMMIT_HASH: ${{ github.sha }}

  # AppSignals specific e2e tests
  appsignals-e2e-test:
    concurrency:
      group: e2e-adot-test
      cancel-in-progress: false
    needs: build
    uses: ./.github/workflows/appsignals-e2e-eks-test.yml
    secrets: inherit
    with:
      aws-region: us-east-1
      test-cluster-name: "e2e-adot-test"
      appsignals-adot-image-name: ${{ needs.build.outputs.staging-image-name }}
      caller-workflow-name: 'main-build'

  publish-build-status:
    needs: [ build ]
    if: ${{ always() }}
    uses: ./.github/workflows/publish-status.yml
    with:
      namespace: 'ADOT/GitHubActions'
      repository: ${{ github.repository }}
      branch: ${{ github.ref_name }}
      workflow: main-build
      success: ${{ needs.build.result == 'success' }}
      region: us-west-2
    secrets:
      roleArn: ${{ secrets.METRICS_ROLE_ARN }}
